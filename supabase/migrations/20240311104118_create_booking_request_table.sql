create table "public"."booking_request" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "room_id" bigint not null,
    "user_id" uuid not null default auth.uid(),
    "start_date" date not null,
    "end_date" date not null
);


alter table "public"."booking_request" enable row level security;

CREATE UNIQUE INDEX booking_request_pkey ON public.booking_request USING btree (id);

alter table "public"."booking_request" add constraint "booking_request_pkey" PRIMARY KEY using index "booking_request_pkey";

alter table "public"."booking_request" add constraint "public_booking_request_room_id_fkey" FOREIGN KEY (room_id) REFERENCES room(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."booking_request" validate constraint "public_booking_request_room_id_fkey";

alter table "public"."booking_request" add constraint "public_booking_request_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."booking_request" validate constraint "public_booking_request_user_id_fkey";

grant delete on table "public"."booking_request" to "anon";

grant insert on table "public"."booking_request" to "anon";

grant references on table "public"."booking_request" to "anon";

grant select on table "public"."booking_request" to "anon";

grant trigger on table "public"."booking_request" to "anon";

grant truncate on table "public"."booking_request" to "anon";

grant update on table "public"."booking_request" to "anon";

grant delete on table "public"."booking_request" to "authenticated";

grant insert on table "public"."booking_request" to "authenticated";

grant references on table "public"."booking_request" to "authenticated";

grant select on table "public"."booking_request" to "authenticated";

grant trigger on table "public"."booking_request" to "authenticated";

grant truncate on table "public"."booking_request" to "authenticated";

grant update on table "public"."booking_request" to "authenticated";

grant delete on table "public"."booking_request" to "service_role";

grant insert on table "public"."booking_request" to "service_role";

grant references on table "public"."booking_request" to "service_role";

grant select on table "public"."booking_request" to "service_role";

grant trigger on table "public"."booking_request" to "service_role";

grant truncate on table "public"."booking_request" to "service_role";

grant update on table "public"."booking_request" to "service_role";

create policy "Allow all for request user"
on "public"."booking_request"
as permissive
for all
to public
using ((user_id = auth.uid()));


create policy "Allow all for room owner"
on "public"."booking_request"
as permissive
for all
to public
using ((room_id IN ( SELECT booking_request.room_id
   FROM room
  WHERE (room.owner_id = auth.uid()))));



